using System.Collections.Generic;

namespace DictionaryMapping;

public static class Mappings
{
    public static Dictionary<string, string> ColumnMap = new Dictionary<string, string>
        {
            // Input name -> output name
            {"SignInIdentifier","alternateSignInName"},
            {"ApplicationDisplayName","appDisplayName"},
            {"ApplicationId","appId"},
            {"City","city"},
            {"ClientAppUsed","clientAppUsed"},
            {"ConditionalAccessStatus","conditionalAccessStatus"},
            {"CorrelationId","correlationId"},
            {"CountryISO","country"},
            {"CreatedDateTime","createdDateTime"},
            {"DeviceDisplayName","deviceDisplayName"},
            {"DeviceId","deviceId"},
            {"env_time","env_time"},
            {"ErrorNo","errorCode"},
            {"ClientIp","ipAddress"},
            // {"IsDeviceCompliantAndManaged","isCompliant"}, // bool to int
            // {"UDIIsInteractive","isInteractive"}, // bool to int
            // {"IsManaged","isManaged"}, // bool to int
            {"Latitude","latitude"},
            {"Longitude","longitude"},
            {"NetworkLocationDetails","networkLocationDetails"},
            {"OperatingSystem","operatingSystem"},
            {"ContextRequestId","originalRequestId"},
            {"ResponseTime","processingTime"},
            {"RiskLevelDuringSignIn","realTimeRisk"},
            {"ResourceDisplayName","resourceDisplayName"},
            {"ResourceId","resourceId"},
            {"RequestId","requestId"},
            {"SourcesOfMfaRequirement","sourcesOfAuthRequirement"},
            {"State","state"},
            {"ContextTenantId","tenantId"},
            {"TokenIssuerType","tokenIssuerType"},
            {"DeviceTrustType","trustType"},
            {"UserDisplayName","userDisplayName"},
            {"ContextUserId","userId"},
            {"PrincipalEmail","userPrincipalName"},
            {"SID","sessionId"},
            {"MsodsTenantRegionScope","msodsTenantRegionScope"},
            {"UserTenantMsodsRegionScope","userTenantMsodsRegionScope"},
            {"UserType","accountType"},
            {"SignInEventType","signInEventType"},
            {"RamLogData","ramLogData"},
            {"AuthenticatedClient","authenticatedClient"},
            {"ClientTypeForConditionalAccess","clientTypeForConditionalAccess"},
            {"Broker","broker"},
            {"ITData","itData"},
            {"Referrer","referrer"},
            {"Call","call"},
            {"LastPasswordChangeTimestamp","lastPasswordChangeTimestamp"},
            {"OTData","otData"},
            {"ClientIPSeenByRP","clientIpSeenByRp"},
            {"AccessPassId","accessPassId"},
            {"UserAuth","userAuth"},
            // {"RealmType","realmType"},  // TODO: Change it to enum
            // {"UserIsExternal","userIsExternal"}, Change it from bool to int
            {"ConditionalAccessVerboseData","conditionalAccessVerboseData"},
            {"ResourceTenantId","resourceTenantId"},
            {"SignInEventTypes","signInEventTypes"},
            {"PtaConnectorId","ptaConnectorId"},
            {"AuthenticationMethodsUsed","authenticationMethodsUsed"},
            {"AuthenticationRequirement","authenticationRequirement"},
            {"TotalRisk","aggregatedRisk"},
            {"RiskDetectionTime","riskDetectionTime"},
            {"RiskDetail","riskDetails"},
            {"RiskState","riskState"},
            {"RiskEventTypes","riskEventTypes"},
            {"UserIsGuest","userIsGuest"},
            {"SessionSelectionResult","sessionSelectionResult"},
            {"AuthMethods","authMethods"},
            {"AuthType","authType"},
            {"BrowserId","browserId"},
            {"RequestBrowser","browser"},
            {"DomainName","domainName"},
            {"EnvCloudLocation","estsCloudLocation"},
            {"env_cloud_name","estsCloudName"},
            {"InvalidUserSecretHashLeastSignificantBits","invalidUserSecretHashLeastSignificantBits"},
            {"Oauth2RequestScopes","oauth2RequestScopes"},
            {"RamAuthenticationStatus","ramAuthenticationStatus"},
            {"Result","result"},
            {"UserAgent","userAgent"},
            {"HomeTenantId","homeTenantId"},
            {"SignInIdentifierType","signInIdentifierType"},
            {"AppAuthLibrary","appAuthLibrary"},
            {"DebugMode","debugMode"},
            {"PrivateLinkId","privateLinkId"},
            {"IsDomainHintPresent","isDomainHintPresent"},
            {"IsLoginHintPresent","isLoginHintPresent"},
            {"IsCAEToken","isCAEToken"},
            {"VNetPrivateIP","vnetPrivateIP"},
            {"TR","tenantRestrictedScenario"},
            {"AppOwnerTenantId","appOwnerTenantId"},
            {"FidoKeyName","fidoKeyName"},
            {"Asn","asn"},
            {"SourcesOfMfaExpiry","sourcesOfAuthExpiry"},
            {"FederationCertificateThumbprint","federationCertificateThumbprint"},
            {"UserCertificateIssuer","userCertificateIssuer"},
            {"UserCertificateSerialNumber","userCertificateSerialNumber"},
            {"UserCertificateThumbprint","userCertificateThumbprint"},
            {"UserCertificateValidFrom","userCertificateValidFrom"},
            {"UserCertificateExpiration","userCertificateExpiration"},
            {"UserCertificateSubjectName","userCertificateSubjectName"},
            {"UserCertificateBinding","userCertificateBinding"},
            {"UserCertificateAuthLevel","userCertificateAuthLevel"},
            {"UserCertificateAuthLevelType","userCertificateAuthLevelType"},
            {"UserCertificateAuthLevelIdentifier","userCertificateAuthLevelIdentifier"},
            {"TenantRestrictedProxySetter","tenantRestrictedProxySetter"},
            {"SSOExtensionVersion","ssoExtensionVersion"},
            {"IsClientCapable","isClientCapable"},
            {"TokenBindingType","tokenBindingType"},
            {"CalculatedWids","wids"},
            {"SamlTimeToLive","samlTimeToLive"},
            {"UniqueTokenId","uniqueTokenId"},
            {"DeprecatedTls","deprecatedTLS"},
            {"IncomingTokenType","tokenType"},
            {"AuthenticationStrengths","authenticationStrengths"},
            {"AuthenticationProtocol","protocol"},
            {"OauthScopes","oauthScopes"},
            {"RngcStatus","rngcStatus"},
            {"FederatedCredentialId","federatedCredentialId"},
            {"ClientCredentialType","clientCredentialType"},
            {"AppServicePrincipalObjectId","appServicePrincipalId"},
            {"ResourceServicePrincipalObjectId","resourceServicePrincipalId"},
            {"HomeTenantUserObjectId","homeTenantUserObjectId"},
            {"AppliedEventListeners","appliedEventListeners"},
            {"AuthAppPolicyDetails","authAppPolicyDetails"},
            {"AuthAppDeviceId","authAppDeviceId"},
            {"AuthAppClient","authAppClient"},
            {"AuthAppOS","authAppOS"},
            {"AuthAppVersion","authAppVersion"},
            {"RevocationTriggeredBy","revocationTriggeredBy"},
            {"FederatedTokenValidationData","federatedTokenValidationData"},
            {"IsForked","isForked"},
            {"UserCertificateAffinityLevel","userCertificateAffinityLevel"},
            {"UserCertificateIssuerHintsConfiguration","userCertificateIssuerHintsConfiguration"},
            {"AuthContextEvaluation","authContextEvaluation"},
            { "SignInTokenProtectionStatus", "signinTokenProtectionStatus" },
            { "AppTokenProtectionStatus", "appTokenProtectionStatus" },
            { "OriginalTransferMethod", "originalTransferMethod" },
        };
    
    public static Dictionary<string, object> DefaultValues = new Dictionary<string, object>
        {
            { "appliedConditionalAccessPolicies", null },
            { "authenticationProcessingDetails", null },
            // { "browser", null }, // Browser and Browser id naming conflict
            { "signInIdentifier", null}, // signInIdentifier naming conflict
            { "userCertificateSubject", null }, // UserCertificateSubjectName naming conflict
            { "privateLinkPolicyId", null},
            { "privateLinkPolicyName", null},
            { "privateLinkArmResourceId", null},
            { "privateLinkPolicyTenantId", null},
            { "isInteractive", null},
            { "isManaged", null},
            { "isCompliant", null},
            { "homeTenantName", null},
            { "eventHubTimestamp", null },
            { "ingestionAgent", null },
            { "mfaData", null }, // TODO: Add special handling
            { "propertiesJson", null },
            { "ramData", null },
            { "row_id", null },
            { "source", null },
            { "tokenIssuerName", null },
            { "administrativeUnits", null },
            { "sourceBlobInfo", null },
            { "serviceId", null },
            { "authenticationProtocol", null },
            { "ipChain", null },
            { "authAppGpsLocation", null },
            { "adfsNetwork", null },
            { "onPremisesServerName", null },
            { "crossTenantAccessSettings", null },
            { "accessType", null },
            { "bindingAttempted", null },
            { "bindingSatisfied", null },
            { "managedIdentityAzureResourceId", null },
            { "outgoingTokenType", null },
            { "incomingTokenData", null },
            { "isThroughGlobalSecureAccess", null },
            { "globalSecureAccessIpAddress", null },
            { "conditionalAccessAudiences", null },
            { "eamProvider", null },
            { "userCertificateIssuerSKI", null },
            { "userCertificatePolicyOID", null },
            { "realmtype", -1 }, // TODO: change it to be converted to enum
            { "userIsExternal", 0 }, // TODO: change from boolean to int
        };
}